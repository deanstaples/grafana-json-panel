{"version":3,"sources":["../src/ajax_ctrl.js"],"names":["MetricsPanelCtrl","_","kbn","TimeSeries","panelDefaults","method","url","errorMode","params_js","display_js","AjaxCtrl","$scope","$injector","templateSrv","$sce","$http","defaults","panel","timeSettings","events","on","onInitEditMode","bind","onPanelInitalized","onRefresh","onRender","datasource","updateTimeRange","console","log","updateFN","editorTabs","splice","addEditorTab","pluginId","editorTabIndex","params_fn","display_fn","Function","ex","warn","json_field","json_field_fn","self","params","then","successCallback","response","html","data","updateContent","errorCallback","body","JSON","stringify","content","trustAsHtml","replace","scopedVars","e","templateUrl"],"mappings":"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","file":"ajax_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport TimeSeries from 'app/core/time_series';\r\nimport './css/ajax-panel.css!';\r\n\r\nconst panelDefaults = {\r\n  method: 'GET',\r\n  url: 'https://raw.githubusercontent.com/ryantxu/ajax-panel/master/static/example.txt',\r\n  errorMode: 'show',\r\n  params_js: \"{\\n\" +\r\n             \" from:ctrl.range.from.format('x'),  // x is unix ms timestamp\\n\" +\r\n             \" to:ctrl.range.to.format('x'), \\n\" +\r\n             \" height:ctrl.height\\n\" +\r\n             \"}\",\r\n  display_js: 'return response.data;'\r\n};\r\n\r\nexport class AjaxCtrl extends MetricsPanelCtrl {\r\n  // constructor($scope, $injector, private templateSrv, private $sce) {\r\n  constructor($scope, $injector, templateSrv, $sce, $http) {\r\n\r\n    super($scope, $injector);\r\n    this.$sce = $sce;\r\n    this.$http = $http;\r\n    this.templateSrv = templateSrv;\r\n\r\n    _.defaults(this.panel, panelDefaults);\r\n    _.defaults(this.panel.timeSettings, panelDefaults.timeSettings);\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('panel-initialized', this.onPanelInitalized.bind(this));\r\n    this.events.on('refresh', this.onRefresh.bind(this));\r\n    this.events.on('render', this.onRender.bind(this));\r\n  }\r\n\r\n  // This just skips trying to send the actual query.  perhaps there is a better way\r\n  issueQueries(datasource) {\r\n    this.updateTimeRange();\r\n\r\n    console.log('block issueQueries', datasource);\r\n  }\r\n\r\n  onPanelInitalized() {\r\n    this.updateFN();\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.editorTabs.splice(1,1); // remove the 'Metrics Tab'\r\n    this.addEditorTab('Options', 'public/plugins/' + this.pluginId + '/editor.html',1);\r\n    this.editorTabIndex = 1;\r\n\r\n    this.updateFN();\r\n  }\r\n\r\n  onPanelTeardown() {\r\n   // this.$timeout.cancel(this.nextTickPromise);\r\n  }\r\n\r\n  updateFN() {\r\n    this.params_fn = null;\r\n    this.display_fn = null;\r\n\r\n    if(this.panel.params_js) {\r\n      try {\r\n        this.params_fn = new Function('ctrl', 'return ' + this.panel.params_js);\r\n      }\r\n      catch( ex ) {\r\n        console.warn('error parsing params_js', this.panel.params_js, ex );\r\n        this.params_fn = null;\r\n      }\r\n    }\r\n\r\n    if(this.panel.display_js) {\r\n      try {\r\n        this.display_fn = new Function('ctrl', 'response', this.panel.display_js);\r\n      }\r\n      catch( ex ) {\r\n        console.warn('error parsing display_js', this.panel.display_js, ex );\r\n        this.display_fn = null;\r\n      }\r\n    }\r\n\r\n    if(this.panel.json_field) {\r\n      try {\r\n        this.json_field_fn = new Function('ctrl', 'return', this.panel.json_field);\r\n      }\r\n      catch( ex ) {\r\n        console.warn('error parsing json_field', this.panel.json_field, ex );\r\n        this.json_field_fn = null;\r\n      }\r\n    }\r\n\r\n    this.onRefresh();\r\n  }\r\n\r\n  onRefresh() {\r\n    //console.log('refresh', this);\r\n    this.updateTimeRange();  // needed for the first call\r\n\r\n    var self = this;\r\n    var params;\r\n    if(this.params_fn) {\r\n      params = this.params_fn( this );\r\n    }\r\n    //console.log( \"onRender\", this, params );\r\n\r\n    this.$http({\r\n      method: this.panel.method,\r\n      url: this.panel.url,\r\n      params: params\r\n    }).then(function successCallback(response) {\r\n      var html = response.data;\r\n      if(self.display_fn) {\r\n        html = self.display_fn(self, response);\r\n      }\r\n      self.updateContent( html );\r\n    }, function errorCallback(response) {\r\n      console.warn('error', response);\r\n      var body = '<h1>Error</h1><pre>' + JSON.stringify(response, null, \" \") + \"</pre>\";\r\n      self.updateContent(body);\r\n    });\r\n\r\n\r\n  }\r\n\r\n  updateContent(html) {\r\n    try {\r\n      this.content = this.$sce.trustAsHtml(this.templateSrv.replace(html, this.panel.scopedVars));\r\n    } catch (e) {\r\n      console.log('Text panel error: ', e);\r\n      this.content = this.$sce.trustAsHtml(html);\r\n    }\r\n  }\r\n\r\n  onRender() {\r\n  }\r\n}\r\n\r\nAjaxCtrl.templateUrl = 'module.html';\r\n"]}